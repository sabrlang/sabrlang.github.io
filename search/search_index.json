{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"ref/literals/","title":"Literals","text":""},{"location":"ref/literals/#number-literals","title":"Number literals","text":"<ul> <li>Integers : <code>255</code>, <code>0255</code>, <code>0xff</code>, <code>0o377</code>, <code>0b11111111</code></li> <li>Floating-point : <code>0.25</code>, <code>.25</code>, <code>00.250</code>, <code>0.25e0</code>, <code>2.5e-1</code>, <code>0.025e1</code></li> </ul>"},{"location":"ref/literals/#character-literals","title":"Character literals","text":"<ul> <li>Unicode characters : <code>'\u3042'</code> -&gt; <code>12354</code></li> <li>Characters sequence : <code>'Hello'</code> -&gt; <code>111 108 108 101 72</code></li> </ul>"},{"location":"ref/literals/#escape-sequences","title":"Escape sequences","text":"<ul> <li><code>\\a</code> -&gt; 7</li> <li><code>\\b</code> -&gt; 8</li> <li><code>\\e</code> -&gt; 27</li> <li><code>\\f</code> -&gt; 12</li> <li><code>\\n</code> -&gt; 10</li> <li><code>\\r</code> -&gt; 13</li> <li><code>\\t</code> -&gt; 9</li> <li><code>\\v</code> -&gt; 11</li> <li><code>\\\\</code> -&gt; 92</li> <li><code>\\'</code> -&gt; 39</li> <li><code>\\\"</code> -&gt; 34</li> <li><code>\\nnn</code> -&gt; The byte whose numerical value is given by nnn interpreted as an octal number.</li> <li><code>\\xhh</code> -&gt; The byte whose numerical value is given by hh interpreted as a hexadecimal number.</li> <li><code>\\uhhhh</code> -&gt; Unicode code point below 10000 hexadecimal.</li> <li><code>\\Uhhhhhhhh</code> -&gt; Unicode code point where h is a hexadecimal digit.</li> </ul>"},{"location":"ref/literals/#string-literals","title":"String literals","text":"<ul> <li><code>\"Hello\"</code> -&gt; It <code>allot</code> 6 cells. It ends with '\\0'.</li> </ul>"},{"location":"ref/literals/#identifier-literals","title":"Identifier literals","text":"<pre><code>$(identifier)\n</code></pre> <p>This is a unique unsigned integer value.</p> <p>It used when declaring subroutines, variables, structures, etc.</p> <p>Control keywords, built-in operators, literals cannot become identifiers.</p>"},{"location":"stdlib/io/","title":"io","text":""},{"location":"stdlib/io/#printf","title":"printf","text":"<p><code>printf ( ... str:format )</code></p>"},{"location":"stdlib/io/#stdin","title":"stdin","text":"<p><code>stdin ( -- File )</code></p>"},{"location":"stdlib/io/#stdout","title":"stdout","text":"<p><code>stdout ( -- File )</code></p>"},{"location":"stdlib/io/#stderr","title":"stderr","text":"<p><code>stderr ( -- File)</code></p>"},{"location":"stdlib/io/#open","title":"open","text":"<p><code>open ( str:mode str:filename -- File )</code></p>"},{"location":"stdlib/io/#fileclose","title":"File.close","text":"<p><code>File.close ( File:file -- n )</code></p>"},{"location":"stdlib/io/#fileseek","title":"File.seek","text":"<p><code>File.seek ( n:origin n:offset File:file -- n )</code></p>"},{"location":"stdlib/io/#filetell","title":"File.tell","text":"<p><code>File.tell ( File:file -- n )</code></p>"},{"location":"stdlib/io/#filerewind","title":"File.rewind","text":"<p><code>File.rewind ( File:file -- )</code></p>"},{"location":"stdlib/io/#fileread_utf8","title":"File.read_utf8","text":"<p><code>File.read_utf8 ( n:bytes addr:dst File:file -- n )</code></p>"},{"location":"stdlib/io/#fileread_bytes","title":"File.read_bytes","text":"<p><code>File.read_bytes ( n:bytes addr:dst File:file -- n )</code></p>"},{"location":"stdlib/io/#fileputc","title":"File.putc","text":"<p><code>File.putc ( c File:file -- )</code></p>"},{"location":"stdlib/io/#fileputs","title":"File.puts","text":"<p><code>File.puts ( str File:file -- )</code></p>"},{"location":"stdlib/io/#fileprintf","title":"File.printf","text":"<p><code>File.printf ( ... str:format File:file -- )</code></p>"},{"location":"stdlib/io/#fileset_cursor_pos","title":"File.set_cursor_pos","text":"<p><code>File.set_cursor_pos ( n:x n:y File:file -- )</code></p>"},{"location":"stdlib/io/#fileclear_screen","title":"File.clear_screen","text":"<p><code>File.clear_screen ( File:file -- )</code></p>"},{"location":"stdlib/io/#filetoggle_cursor","title":"File.toggle_cursor","text":"<p><code>File.toggle_cursor ( b:flag File:file -- )</code></p>"}]}